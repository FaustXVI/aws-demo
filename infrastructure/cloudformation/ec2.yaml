AWSTemplateFormatVersion: 2010-09-09
Description: Create a continuous deployement pipeline with ssh and web access
Resources:
  Repo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}
      RepositoryDescription: Demo for aws
  RepoTriggersPipeline:
    Type: "AWS::CodePipeline::Webhook"
    Properties:
      Authentication: IP
      AuthenticationConfiguration: 
        AllowedIPRange: 0.0.0.0/0
      Filters: []
      Name: !Sub ${AWS::StackName}-triggers-pipeline
      TargetAction: "Source"
      TargetPipeline:
          Ref: Pipeline
      TargetPipelineVersion:
          'Fn::GetAtt' :
              - Pipeline
              - Version
  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub ${AWS::StackName}
      ArtifactStore:
          Type: S3
          Location:
            Ref: PipelineBucket
      RoleArn:
        'Fn::GetAtt':
          - PipelineRole
          - Arn
      Stages:
        - Name: "Source"
          Actions:
            - Name: "Source"
              ActionTypeId:
                Category: "Source"
                Owner: "AWS"
                Version: "1"
                Provider: "CodeCommit"
              OutputArtifacts :
                - Name: sourceCode
              Configuration:
                BranchName: master
                RepositoryName:
                  'Fn::GetAtt':
                    - Repo
                    - Name
        - Name: "Staging"
          Actions:
            - Name: "Deploy"
              ActionTypeId:
                Category: "Deploy"
                Owner: "AWS"
                Version: "1"
                Provider: "CodeDeploy"
              InputArtifacts :
                - Name: sourceCode
              Configuration:
                ApplicationName:
                  Ref: App
                DeploymentGroupName:
                  Ref: DeployGroup
  App:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${AWS::StackName}
  DeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName:
        Ref: App
      DeploymentGroupName: !Sub ${AWS::StackName}
      Ec2TagFilters:
          - Key: Name
            Value: !Sub ${AWS::StackName}
            Type: KEY_AND_VALUE
      ServiceRoleArn:
        'Fn::GetAtt':
          - PipelineRole
          - Arn
  SimpleInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: codestar
      InstanceType: t2.micro
      ImageId: ami-b8b45ddf
      SecurityGroupIds:
        - Ref: AllowSshFromPublic
        - Ref: AllowWebFromPublic
      IamInstanceProfile:
        Ref: EC2Profile
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash
            yum -y update
            yum install -y ruby
            yum install -y aws-cli
            cd /home/ec2-user
            aws s3 cp s3://aws-codedeploy-us-east-2/latest/install .  --region us-east-2
            chmod +x ./install
            ./install auto
            yum install -y httpd
            service httpd start
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
  PipelineBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub ${AWS::StackName}
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  PipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codecommit.amazonaws.com
                - codepipeline.amazonaws.com
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  EC2Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: EC2Policy
      PolicyDocument:
        Statement:
          - Action:
              - 's3:List*'
              - 's3:Get*'
            Effect: Allow
            Resource: '*'
      Roles:
        - Ref: EC2Role
  PipelinePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: PipelinePolicy
      PolicyDocument:
        Statement:
          - Action:
              - 'codecommit:Get*'
              - 'codecommit:Git*'
              - 'codecommit:UploadArchive'
              - 'codecommit:CancelUploadArchive'
              - 's3:*'
              - 'codedeploy:*'
              - 'ec2:*'
            Effect: Allow
            Resource: '*'
      Roles:
        - Ref: PipelineRole
  EC2Profile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - Ref: EC2Role
  AllowSshFromPublic:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow SSH access from anywhere
      SecurityGroupIngress:
        - FromPort: '22'
          ToPort: '22'
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
  AllowWebFromPublic:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow Web access from anywhere
      SecurityGroupIngress:
        - FromPort: '80'
          ToPort: '80'
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: '443'
          ToPort: '443'
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
Outputs:
  CloneUrl:
    Value:
      'Fn::GetAtt':
        - Repo
        - CloneUrlHttp
    Description: Repository to clone
  InstanceDns:
    Value:
      'Fn::GetAtt':
        - SimpleInstance
        - PublicDnsName
    Description: Public DNS Name of our Amazon Linux Instnace.
  InstancePublicIp:
    Value:
      'Fn::GetAtt':
        - SimpleInstance
        - PublicIp
    Description: Public IP Name of our Amazon Linux Instance.
